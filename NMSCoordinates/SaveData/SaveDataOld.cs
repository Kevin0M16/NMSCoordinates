// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var nms = Nms.FromJson(jsonString);

namespace NMSCoordinates.SaveDataOld
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using NMSCoordinates.Properties;

    public partial class GameSaveDataOld
    {
        [JsonProperty("Version")]
        public long Version { get; set; }

        [JsonProperty("Platform")]
        public string Platform { get; set; }

        [JsonProperty("PlayerStateData")]
        public PlayerStateData PlayerStateData { get; set; }

        [JsonProperty("SpawnStateData")]
        public SpawnStateData SpawnStateData { get; set; }
    }

    public partial class PlayerStateData
    {
        [JsonProperty("UniverseAddress")]
        public UniverseAddress UniverseAddress { get; set; }

        [JsonProperty("PreviousUniverseAddress")]
        public UniverseAddress PreviousUniverseAddress { get; set; }

        [JsonProperty("HomeRealityIteration")]
        public long HomeRealityIteration { get; set; }

        [JsonProperty("SaveName")]
        public string SaveName { get; set; }

        [JsonProperty("SaveSummary")]
        public string SaveSummary { get; set; }

        [JsonProperty("DifficultyState")]
        public DifficultyState DifficultyState { get; set; }

        [JsonProperty("TeleportEndpoints")]
        public TeleportEndpoints[] TeleportEndpoints { get; set; }

        [JsonProperty("OnOtherSideOfPortal")]
        public bool OnOtherSideOfPortal { get; set; }

        [JsonProperty("VisitedPortal")]
        public VisitedPortal VisitedPortal { get; set; }

        [JsonProperty("PersistentPlayerBases")]
        public PersistentPlayerBases[] PersistentPlayerBases { get; set; }

        [JsonProperty("TimeLastSpaceBattle")]
        public long TimeLastSpaceBattle { get; set; }

        [JsonProperty("WarpsLastSpaceBattle")]
        public long WarpsLastSpaceBattle { get; set; }

        [JsonProperty("ActiveSpaceBattleUA")]
        public long ActiveSpaceBattleUA { get; set; }

        [JsonProperty("TimeLastMiniStation")]
        public long TimeLastMiniStation { get; set; }

        [JsonProperty("WarpsLastMiniStation")]
        public long WarpsLastMiniStation { get; set; }
    }

    public partial class UniverseAddress
    {
        [JsonProperty("RealityIndex")]
        public long RealityIndex { get; set; }

        [JsonProperty("GalacticAddress")]
        public GalacticAddress GalacticAddress { get; set; }
    }
    public partial class DifficultyState
    {
        [JsonProperty("Preset")]
        public UsedPreset Preset { get; set; }

        [JsonProperty("EasiestUsedPreset")]
        public UsedPreset EasiestUsedPreset { get; set; }

        [JsonProperty("HardestUsedPreset")]
        public UsedPreset HardestUsedPreset { get; set; }

    }
    public partial class UsedPreset
    {
        [JsonProperty("DifficultyPresetType")]
        public string DifficultyPresetType { get; set; }
    }

    public partial class GalacticAddress
    {
        [JsonProperty("VoxelX")]
        public long VoxelX { get; set; }

        [JsonProperty("VoxelY")]
        public long VoxelY { get; set; }

        [JsonProperty("VoxelZ")]
        public long VoxelZ { get; set; }

        [JsonProperty("SolarSystemIndex")]
        public long SolarSystemIndex { get; set; }

        [JsonProperty("PlanetIndex")]
        public long PlanetIndex { get; set; }
    }

    public partial class VisitedPortal
    {
        [JsonProperty("PortalSeed")]
        public PortalSeed[] PortalSeed { get; set; }

        [JsonProperty("LastPortalUA")]
        public string LastPortalUA { get; set; }

        [JsonProperty("IsStoryPortal")]
        public bool IsStoryPortal { get; set; }
    }

    public partial struct PortalSeed
    {
        public bool? Bool;
        public string String;

        public static implicit operator PortalSeed(bool Bool) => new PortalSeed { Bool = Bool };
        public static implicit operator PortalSeed(string String) => new PortalSeed { String = String };
    }

    public partial class PersistentPlayerBases
    {
        [JsonProperty("GalacticAddress")]
        public string GalacticAddress { get; set; }

        [JsonProperty("Name")]
        public string Name { get; set; }
    }
    public partial class TeleportEndpoints
    {
        [JsonProperty("UniverseAddress")]
        public UniverseAddress UniverseAddress { get; set; }

        [JsonProperty("Position")]
        public double[] Position { get; set; }

        [JsonProperty("Facing")]
        public double[] Facing { get; set; }

        [JsonProperty("TeleporterType")]
        public string TeleporterType { get; set; }

        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("CalcWarpOffset")]
        public bool CalcWarpOffset { get; set; }
    }

    public partial class SpawnStateData
    {
        [JsonProperty("PlayerPositionInSystem")]
        public double[] PlayerPositionInSystem { get; set; }

        [JsonProperty("PlayerTransformAt")]
        public double[] PlayerTransformAt { get; set; }

        [JsonProperty("ShipPositionInSystem")]
        public double[] ShipPositionInSystem { get; set; }

        [JsonProperty("ShipTransformAt")]
        public double[] ShipTransformAt { get; set; }

        [JsonProperty("LastKnownPlayerState")]
        public string LastKnownPlayerState { get; set; }

        [JsonProperty("FreighterPositionInSystem")]
        public double[] FreighterPositionInSystem { get; set; }

        [JsonProperty("FreighterTransformAt")]
        public double[] FreighterTransformAt { get; set; }

        [JsonProperty("FreighterTransformUp")]
        public double[] FreighterTransformUp { get; set; }
    }

    public partial class GameSaveDataOld
    {
        public static GameSaveDataOld FromJson(string json) => JsonConvert.DeserializeObject<GameSaveDataOld>(json, NMSCoordinates.SaveDataOld.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this GameSaveDataOld self) => JsonConvert.SerializeObject(self, NMSCoordinates.SaveDataOld.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            NullValueHandling = NullValueHandling.Ignore,
            MissingMemberHandling = MissingMemberHandling.Ignore,
            Formatting = Formatting.None,
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
