// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var nms = Nms.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Nms
    {
        [JsonProperty("F2P")]
        public long F2P { get; set; }

        [JsonProperty("8>q")]
        public string The8Q { get; set; }

        [JsonProperty("6f=")]
        public The6F The6F { get; set; }
    }

    public partial class The6F
    {
        [JsonProperty("yhJ")]
        public YhJ YhJ { get; set; }

        [JsonProperty("rnc")]
        public Rnc Rnc { get; set; }

        [JsonProperty("nlG")]
        public NlG[] NlG { get; set; }

        [JsonProperty("DaC")]
        public bool DaC { get; set; }

        [JsonProperty("F?0")]
        public F0[] F0 { get; set; }

        [JsonProperty("05J")]
        public long O5J { get; set; }

        [JsonProperty("8br")]
        public long Ebr { get; set; }

        [JsonProperty("8xx")]
        public long Exx { get; set; }
    }
    public partial class F0
    {
        [JsonProperty("oZw")]
        public string OZw { get; set; }

        [JsonProperty("NKm")]
        public string NKm { get; set; }
    }
    public partial class NlG
    {
        [JsonProperty("yhJ")]
        public YhJ YhJ { get; set; }

        [JsonProperty("wMC")]
        public double[] WMc { get; set; }

        [JsonProperty("gk4")]
        public double[] Gk4 { get; set; }

        [JsonProperty("iAF")]
        public string IAf { get; set; }

        [JsonProperty("NKm")]
        public string NKm { get; set; }

        [JsonProperty("a>;")]
        public bool A { get; set; }
    }

    public partial class YhJ
    {
        [JsonProperty("Iis")]
        public long Iis { get; set; }

        [JsonProperty("oZw")]
        public Dictionary<string, long> OZw { get; set; }
    }
    public partial class Rnc
    {
        [JsonProperty("jk4")]
        public string Jk4 { get; set; }
    }
    public partial class Nms
    {
        public static Nms FromJson(string json) => JsonConvert.DeserializeObject<Nms>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Nms self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
