// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var nms = Nms.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Nms
    {
        [JsonProperty("F2P")]
        public long Version { get; set; }

        [JsonProperty("8>q")]
        public string Platform { get; set; }

        [JsonProperty("6f=")]
        public PlayerStateData PlayerStateData { get; set; }

        [JsonProperty("rnc")]
        public SpawnStateData SpawnStateData { get; set; }
    }

    public partial class PlayerStateData
    {
        [JsonProperty("yhJ")]
        public UniverseAddress UniverseAddress { get; set; }

        [JsonProperty("ux@")]
        public PreviousUniverseAddress PreviousUniverseAddress { get; set; }

        [JsonProperty("QQp")]
        public long HomeRealityIteration { get; set; }

        [JsonProperty("nlG")]
        public NlG[] NlG { get; set; }

        [JsonProperty("DaC")]
        public bool DaC { get; set; }

        [JsonProperty("NQJ")]
        public Nqj Nqj { get; set; }

        [JsonProperty("F?0")]
        public F0[] F0 { get; set; }

        [JsonProperty("05J")]
        public long TimeLastSpaceBattle { get; set; }

        [JsonProperty("8br")]
        public long WarpsLastSpaceBattle { get; set; }

        [JsonProperty("8xx")]
        public long ActiveSpaceBattleUA { get; set; }

        [JsonProperty("IRi")]
        public long TimeLastMiniStation { get; set; }

        [JsonProperty("x=M")]
        public long WarpsLastMiniStation { get; set; }
    }

    public partial class UniverseAddress
    {
        [JsonProperty("Iis")]
        public long RealityIndex { get; set; }

        [JsonProperty("oZw")]
        public Dictionary<string, long> GalacticAddress { get; set; }
    }

    public partial class PreviousUniverseAddress
    {
        [JsonProperty("Iis")]
        public long RealityIndex { get; set; }

        [JsonProperty("oZw")]
        public Dictionary<string, long> GalacticAddress { get; set; }
    }

    public partial class Nqj
    {
        [JsonProperty("3fO")]
        public The3FO[] The3FO { get; set; }

        [JsonProperty("K:U")]
        public string KU { get; set; }

        [JsonProperty("oEc")]
        public bool OEc { get; set; }
    }

    public partial struct The3FO
    {
        public bool? Bool;
        public string String;

        public static implicit operator The3FO(bool Bool) => new The3FO { Bool = Bool };
        public static implicit operator The3FO(string String) => new The3FO { String = String };
    }

    public partial class F0
    {
        [JsonProperty("oZw")]
        public string OZw { get; set; }

        [JsonProperty("NKm")]
        public string NKm { get; set; }
    }
    public partial class NlG
    {
        [JsonProperty("yhJ")]
        public UniverseAddress UniverseAddress { get; set; }

        [JsonProperty("wMC")]
        public double[] WMc { get; set; }

        [JsonProperty("gk4")]
        public double[] Gk4 { get; set; }

        [JsonProperty("iAF")]
        public string IAf { get; set; }

        [JsonProperty("NKm")]
        public string NKm { get; set; }

        [JsonProperty("a>;")]
        public bool A { get; set; }
    }

    public partial class SpawnStateData
    {
        [JsonProperty("mEH")]
        public double[] MEh { get; set; }

        [JsonProperty("l2U")]
        public double[] L2U { get; set; }

        [JsonProperty("tnP")]
        public double[] TnP { get; set; }

        [JsonProperty("l4H")]
        public double[] L4H { get; set; }

        [JsonProperty("jk4")]
        public string LastKnownPlayerState { get; set; }

        [JsonProperty("NGn")]
        public double[] NGn { get; set; }

        [JsonProperty("uAt")]
        public double[] UAt { get; set; }
    }

    public partial class Nms
    {
        public static Nms FromJson(string json) => JsonConvert.DeserializeObject<Nms>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Nms self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
