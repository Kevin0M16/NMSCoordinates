// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using NMSCoordinates.LocationData;
//
//    var savedLocationData = SavedLocationData.FromJson(jsonString);

namespace NMSCoordinates.LocationData
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class SavedLocationData
    {
        [JsonProperty("version")]
        public long Version { get; set; }

        [JsonProperty("locations")]
        public Locations Locations { get; set; }
    }

    public partial class Locations
    {
        [JsonProperty("bases")]
        public Basis[] Bases { get; set; }

        [JsonProperty("spacestations")]
        public Basis[] Spacestations { get; set; }
    }

    public partial class Basis
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("details")]
        public Details Details { get; set; }
    }

    public partial class Details
    {
        [JsonProperty("datetime")]
        public string Datetime { get; set; }

        [JsonProperty("filename")]
        public string Filename { get; set; }

        [JsonProperty("saveslot")]
        public long Saveslot { get; set; }

        [JsonProperty("galaxy")]
        public long Galaxy { get; set; }

        [JsonProperty("portalcode")]
        public string Portalcode { get; set; }

        [JsonProperty("galacticcoords")]
        public string Galacticcoords { get; set; }

        [JsonProperty("notes")]
        public string Notes { get; set; }
    }

    public partial class SavedLocationData
    {
        public static SavedLocationData FromJson(string json) => JsonConvert.DeserializeObject<SavedLocationData>(json, NMSCoordinates.LocationData.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this SavedLocationData self) => JsonConvert.SerializeObject(self, NMSCoordinates.LocationData.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            Formatting = Formatting.Indented,
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
