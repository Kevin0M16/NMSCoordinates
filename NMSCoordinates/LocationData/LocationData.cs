// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using NMSCoordinates.LocationData;
//
//    var savedLocationData = SavedLocationData.FromJson(jsonString);

namespace NMSCoordinates.LocationData
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class SavedLocationData
    {
        [JsonProperty("version")]
        public int Version { get; set; }

        [JsonProperty("Locations")]
        public Locations Locations { get; set; }
    }

    public partial class Locations
    {
        [JsonProperty("TeleportEndpoints")]
        public LocationArray[] TeleportEndpoints { get; set; }

        [JsonProperty("FutureUse")]
        public LocationArray[] FutureUse { get; set; }
    }

    public partial class LocationArray
    {
        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("Details")]
        public Details Details { get; set; }
    }

    public partial class Details
    {
        [JsonProperty("DateTime")]
        public string DateTime { get; set; }

        [JsonProperty("SaveSlot")]
        public int SaveSlot { get; set; }

        [JsonProperty("LongHex")]
        public string LongHex { get; set; }

        [JsonProperty("Galaxy")]
        public int Galaxy { get; set; }

        [JsonProperty("PortalCode")]
        public string PortalCode { get; set; }

        [JsonProperty("GalacticCoords")]
        public string GalacticCoords { get; set; }

        [JsonProperty("Notes")]
        public string Notes { get; set; }
    }

    public partial class SavedLocationData
    {
        public static SavedLocationData FromJson(string json) => JsonConvert.DeserializeObject<SavedLocationData>(json, NMSCoordinates.LocationData.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this SavedLocationData self) => JsonConvert.SerializeObject(self, NMSCoordinates.LocationData.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            Formatting = Formatting.Indented,
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
